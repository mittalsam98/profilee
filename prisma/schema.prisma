// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model User {
    id            String       @id @default(cuid())
    name          String
    email         String       @unique
    emailVerified DateTime?
    password      String?
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    image         String?
    plan          Plan         @default(FREE)
    accounts      Account[]
    userProfile   UserProfile?
    socialLink    SocialLink[]
    adhocLink     AdhocLink[]
}

model UserProfile {
    id     String  @id @default(uuid())
    bio    String?
    title  String
    user   User    @relation(fields: [userId], references: [id])
    userId String  @unique
}

model SocialLink {
    id        String   @id @default(uuid())
    link      String
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id])
    userId    String
}

model AdhocLink {
    id        String   @id @default(uuid())
    link      String
    name      String
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id])
    userId    String
}

enum Plan {
    FREE
    PRO
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
